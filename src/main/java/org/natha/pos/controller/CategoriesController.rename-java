package org.natha.pos.controller;

import java.util.List;

import org.natha.pos.entity.Categories;
import org.natha.pos.service.ICategoriesService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.util.UriComponentsBuilder;

@Controller
@RequestMapping("user")
public class CategoriesController {
	@Autowired
	private ICategoriesService categoriesService;
	
	@GetMapping("categories/{id}")
	public ResponseEntity<Categories> getCategoriesById(@PathVariable("id") String id) {
		Categories categories = categoriesService.getCategoriesById(id);
		return new ResponseEntity<Categories>(categories, HttpStatus.OK);
	}
	@GetMapping("categories")
	public ResponseEntity<List<Categories>> getAllCategories() {
		List<Categories> list = categoriesService.getAllCategories();
		return new ResponseEntity<List<Categories>>(list, HttpStatus.OK);
	}
	@PostMapping("categories")
	public ResponseEntity<Void> addCategories(@RequestBody Categories categories, UriComponentsBuilder builder) {
        boolean flag = categoriesService.addCategories(categories);
        if (flag == false) {
        	return new ResponseEntity<Void>(HttpStatus.CONFLICT);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(builder.path("/categories/{id}").buildAndExpand(categories.getId()).toUri());
        return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
	}
	@PutMapping("categories")
	public ResponseEntity<Categories> updateCategories(@RequestBody Categories categories) {
		categoriesService.updateCategories(categories);
		return new ResponseEntity<Categories>(categories, HttpStatus.OK);
	}
	@DeleteMapping("categories/{id}")
	public ResponseEntity<Void> deleteCategories(@PathVariable("id") String id) {
		categoriesService.deleteCategories(id);
		return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
	}
}
